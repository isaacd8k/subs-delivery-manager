# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

# FOR TESTING ONLY!
# TODO: Configure auth for each model
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

enum IssueStatus {
  UPCOMING
  RECEIVED
  SKIPPED
}

enum OrderStatus {
  PLACED
  RECEIVED
  DELIVERED
  CANCELED
}

enum PubSubscriptionStatus {
  ACTIVE
  CANCELED
}

enum PeriodicalRecurrence {
  MONTHLY
  BIMONTHLY
  QUARTERLY
}

type PendingQtyChange {
  qty: Int!
  effectiveDate: AWSDate!
}

type SubscriberGroup
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String!
  members: [Subscriber] @hasMany(indexName: "bySubscriberGroup", fields: ["id"])
}

type Subscriber
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  firstName: String!
  lastName: String!
  # store the hasMany relationship in this index instead of creating a new one by default
  subscriberGroupID: ID
    @index(name: "bySubscriberGroup", queryField: "subscribersByGroup")
  pubSubscriptions: [PubSubscription]
    @hasMany(indexName: "bySubscriber", fields: ["id"])
  orders: [Order] @hasMany(indexName: "bySubscriber", fields: ["id"])
  group: SubscriberGroup @belongsTo(fields: ["subscriberGroupID"])
}

type PubSubscription
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  qty: Int!
  startDate: AWSDate
  status: PubSubscriptionStatus!
  pendingQtyChange: PendingQtyChange
  # CONNECTIONS
  periodicalID: ID!
    @primaryKey(sortKeyFields: ["subscriberID"])
    @index(name: "byPeriodical", queryField: "pubSubscriptionsByPeriodical")
  subscriberID: ID!
    @index(name: "bySubscriber", queryField: "pubSubscriptionsBySubscriber")

  # add periodical connection
  periodical: Periodical! @belongsTo(fields: ["periodicalID"])

  # add subscriber connection
  subscriber: Subscriber! @belongsTo(fields: ["subscriberID"])
}

type Periodical
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String!
  # CONNECTION
  recurrence: PeriodicalRecurrence!
  issues: [PeriodicalIssue] @hasMany(indexName: "byPeriodical", fields: ["id"])
  pubSubscriptions: [PubSubscription]
    @hasMany(indexName: "byPeriodical", fields: ["id"])
}

type PeriodicalIssue
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  issueDate: AWSDate!
  status: IssueStatus!
    @index(name: "byStatus", queryField: "periodicalIssuesByStatus")
  # CONNECTIONS
  periodicalID: ID!
    @index(name: "byPeriodical", queryField: "periodicalIssuesByPeriodical")
  orders: [Order] @hasMany(indexName: "byPeriodicalIssue", fields: ["id"])
  notes: String
  isBatchClosed: Boolean! @default(value: "false")
}

type Order
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  placedDate: AWSDate!
  isAutomaticOrder: Boolean! @default(value: "false")
  isPubSubscriptionOrder: Boolean! @default(value: "false")
  itemQty: Int! @default(value: "1")
  status: OrderStatus!
    @default(value: "PLACED")
    @index(name: "byStatus", queryField: "ordersByStatus")
  cancellationReason: String
  # CONNECTIONS
  # Get all orders of a given item
  itemID: ID @index(name: "byItem", queryField: "ordersByItem")
  subscriberID: ID!
    @index(name: "bySubscriber", queryField: "ordersBySubscriber")
    @index(
      name: "bySubscriberByStatus"
      sortKeyFields: ["status"]
      queryField: "ordersBySubscriberByStatus"
    )
    @index(
      name: "bySubscriberByDate"
      sortKeyFields: ["placedDate"]
      queryField: "ordersBySubscriberByDate"
    )
  periodicalIssueID: ID
    @index(name: "byPeriodicalIssue", queryField: "ordersByPeriodicalIssue")
    @index(
      name: "byPeriodicalIssueByStatus"
      sortKeyFields: ["status"]
      queryField: "ordersByPeriodicalIssueByStatus"
    )
}

type Item
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String!
  orders: [Order] @hasMany(indexName: "byItem", fields: ["id"])
  notes: String
}
